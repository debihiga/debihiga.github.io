{"version":3,"sources":["logo.svg","DrawerResponsive.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","drawer","breakpoints","up","width","flexShrink","appBar","marginLeft","menuButton","marginRight","spacing","display","toolbar","mixins","drawerPaper","content","flexGrow","padding","DrawerResponsive","props","container","classes","useTheme","React","useState","mobileOpen","setMobileOpen","handleDrawerToggle","className","Divider","List","map","text","index","ListItem","button","key","ListItemIcon","ListItemText","primary","CssBaseline","AppBar","position","Toolbar","IconButton","color","aria-label","edge","onClick","Typography","variant","noWrap","title","Hidden","smUp","implementation","Drawer","anchor","direction","open","onClose","paper","ModalProps","keepMounted","xsDown","root","bottom","right","ScrollTop","children","window","trigger","useScrollTrigger","target","undefined","disableHysteresis","threshold","Zoom","in","event","ownerDocument","document","querySelector","scrollIntoView","behavior","block","role","App","id","Container","Box","my","Array","join","Fab","size","src","logo","alt","href","rel","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,kC,kYCsBrCC,EAAYC,aAAW,SAACC,GAAD,YAAY,CACvCC,OAAO,eACJD,EAAME,YAAYC,GAAG,MAAQ,CAC5BC,MALc,IAMdC,WAAY,IAGhBC,QAAM,mBACHN,EAAME,YAAYC,GAAG,MAAQ,CAC5BC,MAAM,eAAD,OAXS,IAWT,OACLG,WAZc,MASZ,2BAKQ,WALR,GAONC,WAAW,aACTC,YAAaT,EAAMU,QAAQ,IAC1BV,EAAME,YAAYC,GAAG,MAAQ,CAC5BQ,QAAS,SAIbC,QAASZ,EAAMa,OAAOD,QACtBE,YAAa,CACXV,MAzBgB,KA2BlBW,QAAS,CACPC,SAAU,EACVC,QAASjB,EAAMU,QAAQ,QAsGZQ,MAlGf,SAA0BC,GAAQ,IACxBC,EAAcD,EAAdC,UACFC,EAAUvB,IACVE,EAAQsB,cAHiB,EAIKC,IAAMC,UAAS,GAJpB,mBAIxBC,EAJwB,KAIZC,EAJY,KAMzBC,EAAqB,WACzBD,GAAeD,IAGXxB,EACJ,6BACE,yBAAK2B,UAAWP,EAAQT,UACxB,kBAACiB,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,KACG,CAAC,QAAS,UAAW,aAAc,UAAUC,KAAI,SAACC,EAAMC,GAAP,OAChD,kBAACC,EAAA,EAAD,CAAUC,QAAM,EAACC,IAAKJ,GACpB,kBAACK,EAAA,EAAD,KAAeJ,EAAQ,IAAM,EAAI,kBAAC,IAAD,MAAgB,kBAAC,IAAD,OACjD,kBAACK,EAAA,EAAD,CAAcC,QAASP,SAI7B,kBAACH,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,KACG,CAAC,WAAY,QAAS,QAAQC,KAAI,SAACC,EAAMC,GAAP,OACjC,kBAACC,EAAA,EAAD,CAAUC,QAAM,EAACC,IAAKJ,GACpB,kBAACK,EAAA,EAAD,KAAeJ,EAAQ,IAAM,EAAI,kBAAC,IAAD,MAAgB,kBAAC,IAAD,OACjD,kBAACK,EAAA,EAAD,CAAcC,QAASP,UAOjC,OACE,6BACE,kBAACQ,EAAA,EAAD,MAEA,kBAACC,EAAA,EAAD,CAAQC,SAAS,QAAQd,UAAWP,EAAQf,QAC1C,kBAACqC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,MAAM,UACNC,aAAW,cACXC,KAAK,QACLC,QAASrB,EACTC,UAAWP,EAAQb,YAEnB,kBAAC,IAAD,OAEF,kBAACyC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,QAAM,GAC5BhC,EAAMiC,SAKb,yBAAKxB,UAAWP,EAAQpB,OAAQ6C,aAAW,mBAEzC,kBAACO,EAAA,EAAD,CAAQC,MAAI,EAACC,eAAe,OAC1B,kBAACC,EAAA,EAAD,CACEpC,UAAWA,EACX8B,QAAQ,YACRO,OAA4B,QAApBzD,EAAM0D,UAAsB,QAAU,OAC9CC,KAAMlC,EACNmC,QAASjC,EACTN,QAAS,CACPwC,MAAOxC,EAAQP,aAEjBgD,WAAY,CACVC,aAAa,IAGd9D,IAGL,kBAACoD,EAAA,EAAD,CAAQW,QAAM,EAACT,eAAe,OAC5B,kBAACC,EAAA,EAAD,CACEnC,QAAS,CACPwC,MAAOxC,EAAQP,aAEjBoC,QAAQ,YACRS,MAAI,GAEH1D,O,6DCxHPH,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCiE,KAAM,CACJC,OAAQlE,EAAMU,QAAQ,GACtByD,MAAOnE,EAAMU,QAAQ,GACrBC,QAAS,QAEXI,QAAS,CACPC,SAAU,EACVC,QAASjB,EAAMU,QAAQ,QAI3B,SAAS0D,EAAUjD,GAAQ,IACjBkD,EAAqBlD,EAArBkD,SAAUC,EAAWnD,EAAXmD,OACZjD,EAAUvB,IAIVyE,EAAUC,YAAiB,CAC/BC,OAAQH,EAASA,SAAWI,EAC5BC,mBAAmB,EACnBC,UAAW,MAWb,OACE,kBAACC,EAAA,EAAD,CAAMC,GAAIP,GACR,yBAAKvB,QAVW,SAAC+B,GACnB,IAAMtB,GAAUsB,EAAMN,OAAOO,eAAiBC,UAAUC,cAAc,uBAElEzB,GACFA,EAAO0B,eAAe,CAAEC,SAAU,SAAUC,MAAO,YAMxBC,KAAK,eAAe1D,UAAWP,EAAQ4C,MAC/DI,IA8DMkB,MA/Cf,SAAapE,GAEX,IAAME,EAAUvB,IAEhB,OACE,yBAAK8B,UAAWP,EAAQ4C,MACtB,kBAAC,EAAD,CAAkBb,MAAM,cACxB,0BAAMxB,UAAWP,EAAQN,SACvB,yBAAKa,UAAWP,EAAQT,UACxB,kBAAC+B,EAAA,EAAD,CAAS6C,GAAG,uBACZ,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACN,YAAI,IAAIC,MAAM,KACZ7D,KACC,gRAKD8D,KAAK,QAGZ,kBAACzB,EAAcjD,EACb,kBAAC2E,EAAA,EAAD,CAAKjD,MAAM,YAAYkD,KAAK,QAAQjD,aAAW,sBAC7C,kBAAC,IAAD,QAGJ,4BAAQlB,UAAU,cAChB,yBAAKoE,IAAKC,IAAMrE,UAAU,WAAWsE,IAAI,SACzC,mCACO,4CADP,wBAGA,uBACEtE,UAAU,WACVuE,KAAK,sBACL1B,OAAO,SACP2B,IAAI,uBAJN,mBCrFUC,QACW,cAA7B/B,OAAOgC,SAASC,UAEe,UAA7BjC,OAAOgC,SAASC,UAEhBjC,OAAOgC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF1B,SAAS2B,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b68a3e56.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { makeStyles, useTheme } from '@material-ui/core/styles';\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Hidden from '@material-ui/core/Hidden';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  drawer: {\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: drawerWidth,\r\n      flexShrink: 0,\r\n    },\r\n  },\r\n  appBar: {\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: `calc(100% - ${drawerWidth}px)`,\r\n      marginLeft: drawerWidth,\r\n    },\r\n    background: '#3C3C3C',\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n    [theme.breakpoints.up('sm')]: {\r\n      display: 'none',\r\n    },\r\n  },\r\n  // necessary for content to be below app bar\r\n  toolbar: theme.mixins.toolbar,\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nfunction DrawerResponsive(props) {\r\n  const { container } = props;\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [mobileOpen, setMobileOpen] = React.useState(false);\r\n\r\n  const handleDrawerToggle = () => {\r\n    setMobileOpen(!mobileOpen);\r\n  };\r\n\r\n  const drawer = (\r\n    <div>\r\n      <div className={classes.toolbar} />\r\n      <Divider />\r\n      <List>\r\n        {['Inbox', 'Starred', 'Send email', 'Drafts'].map((text, index) => (\r\n          <ListItem button key={text}>\r\n            <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n            <ListItemText primary={text} />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n      <Divider />\r\n      <List>\r\n        {['All mail', 'Trash', 'Spam'].map((text, index) => (\r\n          <ListItem button key={text}>\r\n            <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n            <ListItemText primary={text} />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <CssBaseline />\r\n      {/* App Bar */}\r\n      <AppBar position=\"fixed\" className={classes.appBar}>\r\n        <Toolbar>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            edge=\"start\"\r\n            onClick={handleDrawerToggle}\r\n            className={classes.menuButton}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" noWrap>\r\n            {props.title}\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      {/* Drawer */}\r\n      <nav className={classes.drawer} aria-label=\"mailbox folders\">\r\n        {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\r\n        <Hidden smUp implementation=\"css\">\r\n          <Drawer\r\n            container={container}\r\n            variant=\"temporary\"\r\n            anchor={theme.direction === 'rtl' ? 'right' : 'left'}\r\n            open={mobileOpen}\r\n            onClose={handleDrawerToggle}\r\n            classes={{\r\n              paper: classes.drawerPaper,\r\n            }}\r\n            ModalProps={{\r\n              keepMounted: true, // Better open performance on mobile.\r\n            }}\r\n          >\r\n            {drawer}\r\n          </Drawer>\r\n        </Hidden>\r\n        <Hidden xsDown implementation=\"css\">\r\n          <Drawer\r\n            classes={{\r\n              paper: classes.drawerPaper,\r\n            }}\r\n            variant=\"permanent\"\r\n            open\r\n          >\r\n            {drawer}\r\n          </Drawer>\r\n        </Hidden>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n\r\nDrawerResponsive.propTypes = {\r\n  /**\r\n   * Injected by the documentation to work in an iframe.\r\n   * You won't need it on your project.\r\n   */\r\n  container: PropTypes.any,\r\n};\r\n\r\nexport default DrawerResponsive;","import './App.css';\n\nimport Box from '@material-ui/core/Box';\nimport Container from '@material-ui/core/Container';\nimport DrawerResponsive from './DrawerResponsive';\nimport Fab from '@material-ui/core/Fab';\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Zoom from '@material-ui/core/Zoom';\nimport logo from './logo.svg';\nimport { makeStyles } from '@material-ui/core/styles';\nimport useScrollTrigger from '@material-ui/core/useScrollTrigger';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    bottom: theme.spacing(2),\n    right: theme.spacing(2),\n    display: 'flex',\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n}));\n\nfunction ScrollTop(props) {\n  const { children, window } = props;\n  const classes = useStyles();\n  // Note that you normally won't need to set the window ref as useScrollTrigger\n  // will default to window.\n  // This is only being set here because the demo is in an iframe.\n  const trigger = useScrollTrigger({\n    target: window ? window() : undefined,\n    disableHysteresis: true,\n    threshold: 100,\n  });\n\n  const handleClick = (event) => {\n    const anchor = (event.target.ownerDocument || document).querySelector('#back-to-top-anchor');\n\n    if (anchor) {\n      anchor.scrollIntoView({ behavior: 'smooth', block: 'center' });\n    }\n  };\n\n  return (\n    <Zoom in={trigger}>\n      <div onClick={handleClick} role=\"presentation\" className={classes.root}>\n        {children}\n      </div>\n    </Zoom>\n  );\n}\n\nScrollTop.propTypes = {\n  children: PropTypes.element.isRequired,\n  /**\n   * Injected by the documentation to work in an iframe.\n   * You won't need it on your project.\n   */\n  window: PropTypes.func,\n};\n\nfunction App(props) {\n\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <DrawerResponsive title=\"Debi Higa\" ></DrawerResponsive>\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        <Toolbar id=\"back-to-top-anchor\" />\n        <Container>\n          <Box my={2}>\n            {[...new Array(12)]\n              .map(\n                () => `Cras mattis consectetur purus sit amet fermentum.\n  Cras justo odio, dapibus ac facilisis in, egestas eget quam.\n  Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\n  Praesent commodo cursus magna, vel scelerisque nisl consectetur et.`,\n              )\n              .join('\\n')}\n          </Box>\n        </Container>\n        <ScrollTop {...props}>\n          <Fab color=\"secondary\" size=\"small\" aria-label=\"scroll back to top\">\n            <KeyboardArrowUpIcon />\n          </Fab>\n        </ScrollTop>\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}